@using TheLottoApp.Models
@model NumberGeneratorViewModel
@{
    ViewBag.Title = "Lotto Number Generator";
}
@*<script src="~/Scripts/Custom/RangeSlider.js"></script>
<link rel="stylesheet" type="text/css" href="~/Content/Custom/RangeSlider.css" />*@
<link href="~/css/bootstrap-slider.min.css" rel="stylesheet" />
<script src="~/Scripts/jquery-1.12.4.min.js"></script>
<script src="~/Scripts/bootstrap.min.js"></script>
<link rel="stylesheet" href="~/Content/bootstrap.min.css" />
<link href="~/Content/font-awesome.min.css" rel="stylesheet" />

<!--Calculator Area-->
<hr />

<div class="container calculatorContainer">
    <div class="row">
        <div class="col-md-6 effect8">
            <div class="panel panel-primary">
                <div class="panel-heading">
                   <label>Pick your choices</label>
                </div>
                <div class="panel-body">
                    @using (Ajax.BeginForm("GenerateNumber", "NumberGenerator", new AjaxOptions() { OnSuccess = "getresult", HttpMethod = "post" }, new { enctype = "multipart/form-data", @class = "form form-horizontal", data_toggle = "validator" }))
                    {
                        @Html.AntiForgeryToken();
                        <div class="form-group">
                            <label class="col-md-5 control-label" for="age">I want to play</label>
                            <div class="col-md-7">
                                <div class="btn-group">
                                    <select name="" id="" class="btn btn-success" required="">
                                        <option value="">Select</option>
                                        <option value="1">Monday Lotto</option>
                                        <option value="2" selected>OZ Lotto</option>
                                        <option value="3">Wednesday Lotto</option>
                                        <option value="4">Powerball</option>
                                        <option value="5">Saturday TattsLotto</option>
                                        <option value="6">Set for Life</option>
                                        <option value="7">The Pools</option>
                                        <option value="8">Super 66</option>
                                        <option value="9">Cash 3</option>
                                    </select>
                                </div>
                                </div>
                            </div>
                            <hr />
                        <div class="form-group form-odd-checkboxes" required>
                            <label class="col-md-5 control-label" for="age">Number of Odds</label>
                            <div class="col-md-7">
                                @*@Html.TextBoxFor(x => x.NumberOfOdds, new { @type = "number", @class = "form-control input-sm" })
                               <label class="numberOfOddsLabel">Doesn't matter</label> <input class="numberOfOddsInput checkbox-primary" type="checkbox" value="doesnt matter" name="doenst matter"/>*@
                                <label class="form-inline">@Html.CheckBoxFor(x => x.oddNumberForZero, new { @type = "checkbox", @class = "checkbox oddNumbers" })0</label>
                                <label class="form-inline">@Html.CheckBoxFor(x => x.oddNumberForOne, new { @type = "checkbox", @class = "checkbox oddNumbers" })1</label>
                                <label class="form-inline">@Html.CheckBoxFor(x => x.oddNumberForTwo, new { @type = "checkbox", @class = "checkbox oddNumbers" })2</label>
                                <label class="form-inline">@Html.CheckBoxFor(x => x.oddNumberForThree, new { @type = "checkbox", @class = "checkbox oddNumbers" })3</label>
                                <label class="form-inline">@Html.CheckBoxFor(x => x.oddNumberForFour, new { @type = "checkbox", @class = "checkbox oddNumbers" })4</label>
                                <label class="form-inline">@Html.CheckBoxFor(x => x.oddNumberForFive, new { @type = "checkbox", @class = "checkbox oddNumbers" })5</label>
                                <label class="form-inline">@Html.CheckBoxFor(x => x.oddNumberForSix, new { @type = "checkbox", @class = "checkbox oddNumbers" })6</label>
                                <label class="form-inline">@Html.CheckBoxFor(x => x.oddNumberForSeven, new { @type = "checkbox", @class = "checkbox oddNumbers" })7</label>
                                <label class="form-inline">@Html.CheckBoxFor(x => x.oddNumberForIgnore, new { @type = "checkbox", @class = "checkbox oddNumbersIgonore" })Doesn't matter</label>
                            </div>
                        </div>
                        <p class="calculator-description col-md-12">
                            How many odd numbers do you want to allow to be in the combination? You can choose multiple options. Keep in mind that it is restricted till seven as it considers the relevant ratio: for example, If you choose 7, calculator returns all odd numbers in the combination, no matter which system you use, as algorithm handles extrapolation of the distribution. Choose number of odds like if the system is seven.
                            If you do not want to consider this filter, check the box “Doesn’t matter”
                        </p>
                        <hr />
                        <div class="form-group">
                            <label class="col-md-5 control-label" for="salary">Numbers below 15</label>
                            <div class="col-md-7">
                                @Html.TextBoxFor(x => x.NumbersBelow15, new { @type = "number", @class = "form-control input-sm" })
                                
                                @Html.ValidationMessageFor(m => m.NumbersBelow15, "", new { @class = "text-danger" })

                                <label class="numberOfOddsLabel">Doesn't matter</label> <input class="numberOfOddsInput" type="checkbox" value="doesnt matter" name="doenst matter" />
                                
                                
                                
                                <!-- Button trigger modal -->
                                
                                    <i class="fa fa-info-circle pull-right btn-primary" id="modalTogller" data-toggle="modal" data-target="#GeneralChartModal"></i>
                                
                                
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-md-5 control-label" for="retire">Numbers between 15 and 30</label>
                            <div class="col-md-7">
                                @Html.TextBoxFor(x => x.NumbersBelow15And30, new { @type = "number", @class = "form-control input-sm", @value = "-1" })          
                                @Html.ValidationMessageFor(m => m.NumbersBelow15And30, "", new { @class = "text-danger" })
                                <label class="numberOfOddsLabel">Doesn't matter</label> <input class="numberOfOddsInput" type="checkbox" value="doesnt matter" name="doenst matter" />
                                <i class="fa fa-info-circle pull-right btn-primary" id="BtnPreviousRepeat" data-toggle="modal" data-target="#PreviousRepeat"></i>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-md-5 control-label" for="retire">Numbers above 30</label>
                            <div class="col-md-7">
                                @Html.TextBoxFor(x => x.NumbersAbove30, new { @type = "number", @class = "form-control input-sm", @value = "-1" })
                                @Html.ValidationMessageFor(m => m.NumbersAbove30, "", new { @class = "text-danger" })
                                <label class="numberOfOddsLabel">Doesn't matter</label> <input class="numberOfOddsInput" type="checkbox" value="doesnt matter" name="doenst matter" />
                                <i class="fa fa-info-circle pull-right btn-primary" id="BtnPreviousOdd" data-toggle="modal" data-target="#PreviousOdd"></i>
                            </div>
                        </div>
                        <p class="calculator-description col-md-12">
                            Choose how many numbers do you want to fit in the specific range: keep in mind, if you fill in all the fields, they should sum up to seven, no matter which system you use. Algorithm handles extrapolation of the distribution. If you do not want to consider this filter, check the box “Doesn’t matter”
                        </p>
                        <hr />
                        <div class="form-group">
                            <label class="col-md-5 control-label" for="contribution">Score Range</label>
                            <div class="col-md-7">
                                @*<b>1.8&nbsp;&nbsp;</b> <input id="slider-input" name="slider-input" type="text" class="span2" value="" data-slider-min="0.018" 
                                   data-slider-max="0.0265" data-slider-step="0.002" data-slider-value="[0.018,0.0265]" />
                                 <b>&nbsp;&nbsp;2.65</b>*@
                                <b>1.8&nbsp;&nbsp;</b> @Html.TextBoxFor(x => x.ScoreRange, new { id = "slider-input", @type = "text",
                                                      @class = "form-control", @value = "", data_slider_min = "0.018",
                                               data_slider_max = "0.028", data_slider_step = "0.002", data_slider_value = "[0.018,0.028]" })
                                <b>&nbsp;&nbsp;2.65</b>
                                <label class="numberOfOddsLabel">Doesn't matter</label>
                                 <input class="numberOfOddsRange" type="checkbox" value="doesnt matter" name="doenst matter" />
                            </div>
                        </div>
                        <p class="calculator-description col-md-12">
                            Each combination has the “score”: the average possibility of the balls coming together, based on the historical data. Statistics for score for previous draws is provided below, you can choose the range of the score you want your combination to fit in. If you do not want to consider this filter, check the box “Doesn’t matter”
                        </p>
                        <hr />
                        <div class="form-group">
                            <label class="col-md-5 control-label" for="status">Number of previous repeat</label>
                            <div class="col-md-7">
                                @Html.TextBoxFor(x => x.NumbersOfPreviousRepeat, new { @type = "number", @class = "form-control input-sm", @value = "-1" })
                                @Html.ValidationMessageFor(m => m.NumbersOfPreviousRepeat, "", new { @class = "text-danger" })
                                <label class="numberOfOddsLabel">Doesn't matter</label> <input class="numberOfOddsInput" type="checkbox" value="doesnt matter" name="doenst matter" />
                            </div>
                        </div>
                        <p class="calculator-description col-md-12">
                            Choose how many numbers from the previous game you want to be repeated. Calculator will randomly choose balls from the previous game to include, according to how many of them do you want in your tickets. If you don’t want any number to be repeated, put zero. If you do not want to consider this filter, check the box “Doesn’t matter”
                            If you want to choose the specific number to be included from previous game, add it explicitly to the next field: “Numbers to Include”
                        </p>
                        <hr />
                        <div class="form-group">
                            <label class="col-md-5 control-label" for="owner">Numbers to include</label>
                            <div class="col-md-7">
                                <input class="form-control input-sm" name="numberstoinclude" type="text" placeholder="Enter comma separated data" id="numberstoinclude"  />
                                <div class="help-block with-errors"></div>
                            </div>
                        </div>
                        <p class="calculator-description col-md-12">
                            Put here numbers, that you want to appear in every generated combination.
                        </p>
                        <hr />
                        <div class="form-group">
                            <label class="col-md-5 control-label" for="owner">Numbers to exclude</label>
                            <div class="col-md-7">
                                <input class="form-control input-sm" name="numberstoexclude" type="text" placeholder="Enter comma separated data" id="numberstoexclude"  />
                                <div class="help-block with-errors"></div>
                            </div>
                        </div>
                        <p class="calculator-description col-md-12">
                            Put here numbers that you do not want to appear in any generated combination.
                        </p>
                        <hr />
                        <div class="form-group">
                            <label class="col-md-5 control-label" for="downsize">System</label>
                            <div class="col-md-7">
                                @Html.TextBoxFor(x => x.system, new { @type = "number", @class = "form-control input-sm", @value = "1", min="7", max = "20", @placeholder = "10" })                             
                                <div class="help-block with-errors"></div>
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="col-md-5 control-label" for="downsize">Number of games</label>
                            <div class="col-md-7">
                                @Html.TextBoxFor(x => x.NumberOfGames, new { @type = "number", @class = "form-control input-sm", @value = "10", min="1", @placeholder = "10" })                          
                                @Html.ValidationMessageFor(m => m.NumberOfGames, "", new { @class = "text-danger" })
                                <div class="help-block with-errors"></div>
                            </div>
                        </div>
                        <p class="calculator-description col-md-12">
                            How many tickets do you want to generate? Your current limit is [put here their current limit]
                        </p>
                        <hr />
                        <div class="form-group">
                            <label class="col-md-5 control-label" for="downsize">System (How many games per game? )</label>
                            <div class="col-md-7">
                                @*<input class="form-control input-sm" name="system" type="number" />*@
                                @Html.TextBoxFor(x => x.system, new { @type = "number", @class = "form-control input-sm" })
                                @Html.ValidationMessageFor(m => m.system, "", new { @class = "text-danger" })
                                <div class="help-block with-errors"></div>
                            </div>
                        </div>
                        <p class="calculator-description col-md-12">
                            How many balls per ticket to you want to generate?
                        </p>
                        <hr />
                        <div class="form-group">
                            <div class="col-md-offset-3 col-md-4">
                                <input type="submit" value="Generate" class="btn pull-right btn-primary btn-lg" id="calculate">
                            </div>
                        </div>
                       
                    }
                </div>
            </div>
        </div>
        <div class="col-md-5 col-md-offset-1">
            
            <div id="GeneratedSetWrapper">

            </div>

            </div>
            </div>
        </div>


<<<<<<< HEAD
<!-- Modal -->
<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="GeneralChartModalLabel" aria-hidden="true">
  
</div>
=======
<!-- Modal -> General -->
<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="GeneralChartModalLabel" aria-hidden="true">
  
</div>
<!-- Modal -> Previous Repeat -->
<div class="modal fade" id="PreviousRepeat" tabindex="-1" role="dialog" aria-labelledby="PreviousRepeatModalLabel" aria-hidden="true">

</div>
<!-- Modal -> Previous Odd -->
<div class="modal fade" id="PreviousOdd" tabindex="-1" role="dialog" aria-labelledby="PreviousOddModalLabel" aria-hidden="true">

</div>
>>>>>>> 490eb16630eb3ccedbcdc61b5c5eb78fd2ffdda3

<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    
    @Scripts.Render("~/Scripts/bootstrap-slider.min.js")
   
    @Scripts.Render("~/bundles/jqueryunob")

<script>
    $('#slider-input').slider({});

    $(".numberOfOddsInput").click(function () {
        $(this).parent().children('input').val(-1);
        if ($('.numberOfOddsInput').is(':checked')) {
            $('#txt').val('checked');
            $(this).parent().children('input').first().val("-1");
            debugger;
            if ($(this).prev('.field-validation-error')) {
                var a = $(this).prev('.field-validation-error');
                $(this).prev('.field-validation-error').toggle();
                //$(this).prev('.field-validation-error').remove();

            }
        }
        else {
            $(this).parent().children('input').first().val("0");
        }
        $(this).parent().children('input').first().toggle("disabled");

    })
    $(".numberOfOddsRange").click(function () {
        $(this).val(-1);
        $('#slider-input').toggle('disabled');
            $(this).parent().children().not(this).toggle("disabled");

    })

    function getresult(data) {
        var myNode = document.getElementById("GeneratedSetWrapper");
        while (myNode.firstChild) {
            myNode.removeChild(myNode.firstChild);
        }
        if (typeof data.GeneratedSet != 'string') {
            if (data != null || data != "Server Error!!!") {

                for (i = 0; i < data.GeneratedSet.length; i++) {
                    var wrapper = document.createElement('div');
                    wrapper.setAttribute('id', 'generated_number');
                    var spanWrapper = "";
                    $.each(data.GeneratedSet[i], function (index, val) {
                        spanWrapper += "<span class='number'>" + val + "</span>\n";
                    })
                    wrapper.innerHTML = spanWrapper;
                    $('#GeneratedSetWrapper').append(wrapper);
                }

            }
        } else  {
            $('#GeneratedSetWrapper').append("<div class='alert alert-danger'>"+data.GeneratedSet+"</div>");
        };
        $("html, body").animate({ scrollTop: 0 }, 200);

    };


    //for check boxes
    $('.oddNumbersIgonore').click(function () {
        if ($(this).is(':checked')) {
            $('.oddNumbers').attr('checked', false);
            $('.oddNumbers').attr('disabled', 'disabled');
        }
        else {
            $('.oddNumbers').removeAttr('disabled');
        }
    })

    //load charts on modal
      
<<<<<<< HEAD
            
=======
      //general      
>>>>>>> 490eb16630eb3ccedbcdc61b5c5eb78fd2ffdda3
    $("#modalTogller").click(function () {
        $('#myModal').modal({
            keyboard: false,
            remote: '/ChartGenerator/DrawGeneralChart'
        }).show();
        
    });

<<<<<<< HEAD
     
=======
    //previous repoeat
    $("#BtnPreviousRepeat").click(function () {
        $('#PreviousRepeat').modal({
            keyboard: false,
            remote: '/ChartGenerator/DrawPreviousRepeatChart'
        }).show();

    });

    //Previous odd
    $("#BtnPreviousOdd").click(function () {
        $('#PreviousOdd').modal({
            keyboard: false,
            remote: '/ChartGenerator/DrawPreviousOddChart'
        }).show();
>>>>>>> 490eb16630eb3ccedbcdc61b5c5eb78fd2ffdda3

    });

   
    

    </script>
}

